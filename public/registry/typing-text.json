{
  "name": "typing-text",
  "type": "components:qiuye-ui",
  "dependencies": ["react"],
  "registryDependencies": [],
  "files": [
    {
      "name": "typing-text.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface TypingTextProps extends React.HTMLAttributes<HTMLDivElement> {\n  text: string | string[];\n  speed?: number;\n  loop?: boolean;\n  showCursor?: boolean;\n}\n\nconst TypingText = React.forwardRef<HTMLDivElement, TypingTextProps>(\n  ({ \n    className, \n    text, \n    speed = 100, \n    loop = false, \n    showCursor = true, \n    ...props \n  }, ref) => {\n    const [displayedText, setDisplayedText] = useState(\"\");\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [currentTextIndex, setCurrentTextIndex] = useState(0);\n    const [isDeleting, setIsDeleting] = useState(false);\n    const [isPaused, setIsPaused] = useState(false);\n\n    const textArray = Array.isArray(text) ? text : [text];\n    const currentText = textArray[currentTextIndex];\n\n    useEffect(() => {\n      if (isPaused) return;\n\n      const timeout = setTimeout(() => {\n        if (!isDeleting) {\n          // 正在输入\n          if (currentIndex < currentText.length) {\n            setDisplayedText(currentText.slice(0, currentIndex + 1));\n            setCurrentIndex(currentIndex + 1);\n          } else {\n            // 输入完成，如果是数组且启用循环，则暂停后开始删除\n            if (textArray.length > 1 && loop) {\n              setIsPaused(true);\n              setTimeout(() => {\n                setIsDeleting(true);\n                setIsPaused(false);\n              }, 1000); // 暂停1秒\n            } else if (textArray.length === 1 && loop) {\n              // 单个文本循环\n              setIsPaused(true);\n              setTimeout(() => {\n                setIsDeleting(true);\n                setIsPaused(false);\n              }, 1000);\n            }\n          }\n        } else {\n          // 正在删除\n          if (currentIndex > 0) {\n            setDisplayedText(currentText.slice(0, currentIndex - 1));\n            setCurrentIndex(currentIndex - 1);\n          } else {\n            // 删除完成，切换到下一个文本\n            setIsDeleting(false);\n            if (textArray.length > 1) {\n              setCurrentTextIndex((currentTextIndex + 1) % textArray.length);\n            }\n          }\n        }\n      }, isDeleting ? speed / 2 : speed); // 删除速度比输入速度快一倍\n\n      return () => clearTimeout(timeout);\n    }, [currentIndex, currentText, currentTextIndex, isDeleting, isPaused, loop, speed, textArray]);\n\n    return (\n      <div\n        className={cn(\"inline-flex items-center\", className)}\n        ref={ref}\n        {...props}\n      >\n        <span className=\"font-mono\">\n          {displayedText}\n          {showCursor && (\n            <span className=\"ml-0.5 animate-pulse text-foreground/60\">|</span>\n          )}\n        </span>\n      </div>\n    );\n  }\n);\n\nTypingText.displayName = \"TypingText\";\n\nexport { TypingText };"
    }
  ]
}
