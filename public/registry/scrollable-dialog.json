{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scrollable-dialog",
  "title": "ScrollableDialog",
  "type": "registry:component",
  "author": "QiuYeDx <me@qiuyedx.com>",
  "dependencies": [
    "react"
  ],
  "registryDependencies": [
    "dialog"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "components/qiuye-ui/scrollable-dialog.tsx",
      "target": "src/components/qiuye-ui/scrollable-dialog.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ScrollableDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  children?: React.ReactNode;\n  className?: string;\n  contentClassName?: string;\n  onOpenAutoFocus?: (e: Event) => void;\n}\n\ninterface ScrollableDialogHeaderProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface ScrollableDialogContentProps {\n  children: React.ReactNode;\n  className?: string;\n  /** 是否显示上下渐变遮罩 */\n  fadeMasks?: boolean;\n  /** 渐变遮罩高度，单位为像素 */\n  fadeMaskHeight?: number;\n}\n\ninterface ScrollableDialogFooterProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\n/**\n * 可滚动对话框容器组件\n *\n * 与 shadcn/ui 原生 Dialog 的区别：\n * - Header 和 Footer 固定在顶部和底部\n * - Content 区域可滚动查看\n * - 支持上下渐变遮罩效果，提示用户有更多内容\n *\n * @example\n * ```tsx\n * <ScrollableDialog open={isOpen} onOpenChange={setIsOpen}>\n *   <ScrollableDialogHeader>\n *     <DialogTitle>标题</DialogTitle>\n *     <DialogDescription>描述</DialogDescription>\n *   </ScrollableDialogHeader>\n *\n *   <ScrollableDialogContent fadeMasks={true} fadeMaskHeight={40}>\n *     // 可滚动的内容\n *   </ScrollableDialogContent>\n *\n *   <ScrollableDialogFooter>\n *     // 固定的底部操作按钮\n *   </ScrollableDialogFooter>\n * </ScrollableDialog>\n * ```\n */\nfunction ScrollableDialog({\n  open,\n  onOpenChange,\n  children,\n  className,\n  contentClassName,\n  onOpenAutoFocus = (e) => e.preventDefault(),\n}: ScrollableDialogProps) {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent\n        className={cn(\n          \"p-0 max-h-[85vh] w-[calc(100vw-2rem)] sm:w-full sm:max-w-md grid grid-rows-[auto_1fr_auto] gap-0 overflow-hidden\",\n          contentClassName\n        )}\n        onOpenAutoFocus={onOpenAutoFocus}\n      >\n        <div className={cn(\"contents\", className)}>{children}</div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n/**\n * 可滚动对话框的固定头部区域\n */\nfunction ScrollableDialogHeader({\n  children,\n  className,\n}: ScrollableDialogHeaderProps) {\n  return (\n    <div className={cn(\"border-b px-4 py-4\", className)}>\n      <DialogHeader>{children}</DialogHeader>\n    </div>\n  );\n}\n\n/**\n * 可滚动对话框的可滚动内容区域\n */\nfunction ScrollableDialogContent({\n  children,\n  className,\n  fadeMasks = true,\n  fadeMaskHeight = 40,\n}: ScrollableDialogContentProps) {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const [showTopFade, setShowTopFade] = React.useState(false);\n  const [showBottomFade, setShowBottomFade] = React.useState(false);\n\n  // 检查滚动状态，更新遮罩显示\n  const checkScrollAffordance = React.useCallback(() => {\n    if (!fadeMasks) return;\n\n    const container = containerRef.current;\n    if (!container) return;\n\n    // 查找 ScrollArea 内部的 viewport 元素\n    const viewport = container.querySelector(\n      \"[data-slot='scroll-area-viewport']\"\n    ) as HTMLElement;\n    if (!viewport) return;\n\n    const { scrollTop, scrollHeight, clientHeight } = viewport;\n    const maxScroll = scrollHeight - clientHeight;\n\n    setShowTopFade(scrollTop > 1);\n    setShowBottomFade(maxScroll > 0 && scrollTop < maxScroll - 1);\n  }, [fadeMasks]);\n\n  // 监听滚动和尺寸变化\n  React.useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const viewport = container.querySelector(\n      \"[data-slot='scroll-area-viewport']\"\n    ) as HTMLElement;\n    if (!viewport) return;\n\n    const onScroll = () => checkScrollAffordance();\n    viewport.addEventListener(\"scroll\", onScroll, { passive: true });\n\n    // 初始检查\n    checkScrollAffordance();\n\n    // 监听尺寸变化\n    const ro = new ResizeObserver(() => {\n      checkScrollAffordance();\n    });\n    ro.observe(viewport);\n\n    return () => {\n      viewport.removeEventListener(\"scroll\", onScroll);\n      ro.disconnect();\n    };\n  }, [checkScrollAffordance]);\n\n  return (\n    <ScrollArea\n      ref={containerRef}\n      className={cn(\n        \"relative overflow-hidden\",\n        \"[&_[data-radix-scroll-area-viewport]]:border-t [&_[data-radix-scroll-area-viewport]]:border-b [&_[data-radix-scroll-area-viewport]]:border-background\",\n        className\n      )}\n    >\n      <div className=\"px-4 py-4\">{children}</div>\n\n      {/* 顶部渐变遮罩 */}\n      <AnimatePresence>\n        {fadeMasks && showTopFade && (\n          <motion.div\n            aria-hidden=\"true\"\n            className=\"pointer-events-none absolute left-0 right-0 top-0 z-[5] bg-gradient-to-b from-background to-transparent\"\n            style={{ height: `${fadeMaskHeight}px` }}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.2, ease: \"easeOut\" }}\n          />\n        )}\n      </AnimatePresence>\n\n      {/* 底部渐变遮罩 */}\n      <AnimatePresence>\n        {fadeMasks && showBottomFade && (\n          <motion.div\n            aria-hidden=\"true\"\n            className=\"pointer-events-none absolute left-0 right-0 bottom-0 z-[5] bg-gradient-to-t from-background to-transparent\"\n            style={{ height: `${fadeMaskHeight}px` }}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.2, ease: \"easeOut\" }}\n          />\n        )}\n      </AnimatePresence>\n    </ScrollArea>\n  );\n}\n\n/**\n * 可滚动对话框的固定底部区域\n */\nfunction ScrollableDialogFooter({\n  children,\n  className,\n}: ScrollableDialogFooterProps) {\n  return <div className={cn(\"border-t px-4 py-4\", className)}>{children}</div>;\n}\n\nexport {\n  ScrollableDialog,\n  ScrollableDialogHeader,\n  ScrollableDialogContent,\n  ScrollableDialogFooter,\n  // 重新导出原始 Dialog 的子组件，方便使用\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n};\n"
    }
  ]
}
