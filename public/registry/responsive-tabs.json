{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responsive-tabs",
  "title": "ResponsiveTabs",
  "type": "registry:component",
  "author": "QiuYeDx <me@qiuyedx.com>",
  "dependencies": [
    "react",
    "lucide-react"
  ],
  "registryDependencies": [
    "tabs",
    "badge",
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "components/qiuye-ui/responsive-tabs.tsx",
      "target": "src/components/qiuye-ui/responsive-tabs.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useEffect } from \"react\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface TabItem {\n  value: string;\n  label: string;\n  icon?: React.ReactNode;\n  badge?: number | string;\n  disabled?: boolean;\n}\n\ntype LayoutMode = \"responsive\" | \"scroll\" | \"grid\";\n\nexport interface ResponsiveTabsProps {\n  value: string;\n  onValueChange: (value: string) => void;\n  items: TabItem[];\n  children: React.ReactNode;\n  /** 是否显示左右滚动按钮（在滚动模式下生效） */\n  scrollButtons?: boolean;\n  /** 每次滚动步长 */\n  scrollStep?: number;\n  /** ≥sm 的网格列定义（会应用在 TabsList 上；在 layout=\\\"grid\\\" 时请提供无断点或自定义断点的类） */\n  gridColsClass?: string;\n  listClassName?: string;\n  triggerClassName?: string;\n  /** 小屏滚动时两侧“贴边”内边距；layout=\\\"scroll\\\" 时在所有断点生效 */\n  edgeGutter?: boolean;\n  /** 布局模式：responsive | scroll | grid */\n  layout?: LayoutMode;\n  className?: string;\n  /** 是否显示左右渐变遮罩（在滚动模式下生效） */\n  fadeMasks?: boolean;\n  /** 渐变遮罩宽度，单位为像素 */\n  fadeMaskWidth?: number;\n}\n\nconst ResponsiveTabs = React.forwardRef<\n  React.ElementRef<typeof Tabs>,\n  ResponsiveTabsProps\n>(\n  (\n    {\n      value,\n      onValueChange,\n      items,\n      children,\n      scrollButtons = true,\n      scrollStep = 220,\n      gridColsClass = \"sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8\",\n      listClassName,\n      triggerClassName,\n      edgeGutter = true,\n      layout = \"responsive\",\n      className,\n      fadeMasks = true,\n      fadeMaskWidth = 32,\n      ...props\n    },\n    ref\n  ) => {\n    const scrollContainerRef = useRef<HTMLDivElement>(null);\n    const tabsListRef = useRef<HTMLDivElement>(null);\n    const [showLeftButton, setShowLeftButton] = React.useState(false);\n    const [showRightButton, setShowRightButton] = React.useState(false);\n    const [showLeftFade, setShowLeftFade] = React.useState(false);\n    const [showRightFade, setShowRightFade] = React.useState(false);\n\n    const isScrollAll = layout === \"scroll\";\n    const isGridAll = layout === \"grid\";\n    const isResponsive = layout === \"responsive\";\n\n    // 检查滚动按钮和渐变遮罩是否需要显示\n    const checkScrollButtons = React.useCallback(() => {\n      if (!scrollContainerRef.current) return;\n      const el = scrollContainerRef.current;\n      const { scrollLeft, scrollWidth, clientWidth } = el;\n\n      // 更新滚动按钮状态\n      if (scrollButtons) {\n        setShowLeftButton(scrollLeft > 0);\n        setShowRightButton(scrollLeft + clientWidth < scrollWidth - 1);\n      }\n\n      // 更新渐变遮罩状态 (在滚动模式或响应式模式的小屏下)\n      if (fadeMasks && (isScrollAll || isResponsive)) {\n        const maxScroll = scrollWidth - clientWidth;\n        setShowLeftFade(scrollLeft > 1);\n        setShowRightFade(maxScroll > 0 && scrollLeft < maxScroll - 1);\n      }\n    }, [scrollButtons, fadeMasks, isScrollAll, isResponsive]);\n\n    // 左右滚动\n    const scrollByDir = (dir: \"left\" | \"right\") => {\n      const el = scrollContainerRef.current;\n      if (!el) return;\n      el.scrollBy({\n        left: dir === \"left\" ? -scrollStep : scrollStep,\n        behavior: \"smooth\",\n      });\n    };\n\n    // 滚动到激活项\n    const scrollToActiveTab = React.useCallback(() => {\n      const container = scrollContainerRef.current;\n      const list = tabsListRef.current;\n      if (!container || !list) return;\n\n      const active = list.querySelector<HTMLElement>('[data-state=\"active\"]');\n      if (!active) return;\n\n      const cRect = container.getBoundingClientRect();\n      const aRect = active.getBoundingClientRect();\n      const fullyVisible =\n        aRect.left >= cRect.left && aRect.right <= cRect.right;\n\n      if (!fullyVisible) {\n        const targetLeft =\n          active.offsetLeft - (container.clientWidth - active.clientWidth) / 2;\n        container.scrollTo({\n          left: Math.max(0, targetLeft),\n          behavior: \"smooth\",\n        });\n      }\n    }, []);\n\n    // 监听滚动/尺寸变化\n    useEffect(() => {\n      const el = scrollContainerRef.current;\n      if (!el) return;\n\n      const onScroll = () => checkScrollButtons();\n      el.addEventListener(\"scroll\", onScroll, { passive: true });\n      checkScrollButtons();\n\n      const ro = new ResizeObserver(() => {\n        checkScrollButtons();\n        scrollToActiveTab();\n      });\n      ro.observe(el);\n\n      const onWinResize = () => {\n        checkScrollButtons();\n        scrollToActiveTab();\n      };\n      window.addEventListener(\"resize\", onWinResize);\n\n      return () => {\n        el.removeEventListener(\"scroll\", onScroll);\n        ro.disconnect();\n        window.removeEventListener(\"resize\", onWinResize);\n      };\n    }, [checkScrollButtons, scrollToActiveTab]);\n\n    // 让滚轮纵向 -> 横向（仅在 layout=\"scroll\" 时）\n    // TODO: 滚动体验不好, 待优化\n    useEffect(() => {\n      if (!isScrollAll) return;\n\n      const el = scrollContainerRef.current;\n      if (!el) return;\n\n      const onWheel = (e: WheelEvent) => {\n        // 触控板本来就在横向滚/缩放时，不劫持\n        if (Math.abs(e.deltaX) > Math.abs(e.deltaY)) return;\n        if (e.ctrlKey) return;\n\n        const hasOverflowX = el.scrollWidth > el.clientWidth;\n        if (!hasOverflowX) return;\n\n        const max = el.scrollWidth - el.clientWidth;\n        const atStart = el.scrollLeft <= 0;\n        const atEnd = el.scrollLeft >= max - 1;\n\n        // 只有确实还能滚动时才阻止默认垂直滚动\n        const goingLeft = e.deltaY < 0;\n        const goingRight = e.deltaY > 0;\n\n        if ((goingLeft && !atStart) || (goingRight && !atEnd)) {\n          e.preventDefault();\n          // 用 deltaY 作为横向步进，保持触控板/滚轮的自然加速度感\n          el.scrollBy({ left: e.deltaY, behavior: \"auto\" });\n          // 更新左右按钮可见性\n          checkScrollButtons();\n        }\n      };\n\n      el.addEventListener(\"wheel\", onWheel, { passive: false });\n      return () => el.removeEventListener(\"wheel\", onWheel);\n    }, [isScrollAll, checkScrollButtons]);\n\n    // value 改变时，确保激活项可见\n    useEffect(() => {\n      // 仅在滚动模式下需要定位\n      if (isGridAll) return;\n      scrollToActiveTab();\n    }, [value, isGridAll, scrollToActiveTab]);\n\n    // 按模式计算样式\n    const containerClass = cn(\n      \"w-full max-w-full\",\n      // 滚动可见性\n      isGridAll\n        ? \"overflow-visible\"\n        : isScrollAll\n          ? \"overflow-x-auto\"\n          : \"overflow-x-auto sm:overflow-visible\",\n      // 隐藏滚动条\n      !isGridAll &&\n        \"[scrollbar-width:none] [-ms-overflow-style:none] [&::-webkit-scrollbar]:hidden\",\n      // 边缘贴边\n      edgeGutter && (isScrollAll ? \"px-6\" : \"px-6 sm:px-0\"),\n      // 阻断 inline 方向的滚动链，防止页面跟着滚\n      \"overscroll-contain\"\n    );\n\n    const listClass = cn(\n      // 行为：小屏/全屏滚动 or 网格\n      isGridAll\n        ? \"grid w-full gap-0\"\n        : isScrollAll\n          ? \"inline-flex w-max whitespace-nowrap gap-1\"\n          : \"inline-flex w-max whitespace-nowrap gap-1 sm:grid sm:w-full sm:gap-0\",\n      // 列定义：仅在有 grid 的模式下生效\n      (isGridAll || isResponsive) && gridColsClass,\n      \"h-auto p-1\",\n      listClassName\n    );\n\n    const triggerClass = cn(\n      // 滚动模式下防压缩\n      !isGridAll && \"shrink-0 min-w-fit px-3 py-2\",\n      // 网格/响应式大屏：格子里居中\n      (isGridAll || isResponsive) &&\n        \"sm:shrink sm:min-w-0 sm:flex sm:items-center sm:justify-center\",\n      \"data-[state=active]:font-medium\",\n      triggerClassName\n    );\n\n    // 按模式控制滚动按钮在大屏是否显示\n    const buttonVisibilityClass = isScrollAll ? \"\" : \"sm:hidden\";\n\n    return (\n      <Tabs\n        ref={ref}\n        value={value}\n        onValueChange={onValueChange}\n        className={cn(\"w-full\", className)}\n        {...props}\n      >\n        {/* 不确定要不要改 */}\n        {/* <div className=\"relative\"> */}\n        <div className=\"relative w-full overflow-x-hidden\">\n          {scrollButtons && !isGridAll && showLeftButton && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"absolute left-1 top-1/2 z-10 h-8 w-8 -translate-y-1/2 rounded-full bg-background/80 p-0 shadow-md backdrop-blur-sm\",\n                buttonVisibilityClass\n              )}\n              onClick={() => scrollByDir(\"left\")}\n              aria-label=\"向左滚动\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n          )}\n\n          {scrollButtons && !isGridAll && showRightButton && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"absolute right-1 top-1/2 z-10 h-8 w-8 -translate-y-1/2 rounded-full bg-background/80 p-0 shadow-md backdrop-blur-sm\",\n                buttonVisibilityClass\n              )}\n              onClick={() => scrollByDir(\"right\")}\n              aria-label=\"向右滚动\"\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          )}\n\n          {/* 左右渐变遮罩 */}\n          {fadeMasks && (isScrollAll || isResponsive) && showLeftFade && (\n            <div\n              aria-hidden=\"true\"\n              className=\"pointer-events-none absolute left-0 top-0 bottom-0 z-[5] bg-gradient-to-r from-background to-transparent\"\n              style={{ width: `${fadeMaskWidth}px` }}\n            />\n          )}\n          {fadeMasks && (isScrollAll || isResponsive) && showRightFade && (\n            <div\n              aria-hidden=\"true\"\n              className=\"pointer-events-none absolute right-0 top-0 bottom-0 z-[5] bg-gradient-to-l from-background to-transparent\"\n              style={{ width: `${fadeMaskWidth}px` }}\n            />\n          )}\n\n          {/* 滚动/网格容器 */}\n          <div ref={scrollContainerRef} className={containerClass}>\n            <TabsList ref={tabsListRef} className={listClass}>\n              {items.map((item) => (\n                <TabsTrigger\n                  key={item.value}\n                  value={item.value}\n                  disabled={item.disabled}\n                  className={triggerClass}\n                >\n                  <span className=\"flex items-center gap-2 max-w-full\">\n                    {item.icon && <span className=\"shrink-0\">{item.icon}</span>}\n                    <span className=\"truncate\">{item.label}</span>\n                    {item.badge !== undefined && (\n                      <Badge\n                        variant=\"secondary\"\n                        className=\"ml-1 h-5 min-w-[20px] px-1 text-xs\"\n                      >\n                        {item.badge}\n                      </Badge>\n                    )}\n                  </span>\n                </TabsTrigger>\n              ))}\n            </TabsList>\n          </div>\n        </div>\n\n        <div className=\"mt-4\">{children}</div>\n      </Tabs>\n    );\n  }\n);\n\nResponsiveTabs.displayName = \"ResponsiveTabs\";\nexport { ResponsiveTabs };\n"
    }
  ]
}
