{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responsive-tabs",
  "title": "ResponsiveTabs",
  "type": "registry:component",
  "author": "QiuYeDx <me@qiuyedx.com>",
  "dependencies": [
    "react",
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "tabs",
    "badge",
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "components/qiuye-ui/responsive-tabs.tsx",
      "target": "src/components/qiuye-ui/responsive-tabs.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useEffect } from \"react\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"motion/react\";\n\nexport interface TabItem {\n  value: string;\n  label: string;\n  icon?: React.ReactNode;\n  badge?: number | string;\n  disabled?: boolean;\n}\n\ntype LayoutMode = \"responsive\" | \"scroll\" | \"grid\";\n\nexport interface ResponsiveTabsProps {\n  value: string;\n  onValueChange: (value: string) => void;\n  items: TabItem[];\n  children: React.ReactNode;\n  /** 是否显示左右滚动按钮（在滚动模式下生效） */\n  scrollButtons?: boolean;\n  /** 每次滚动步长 */\n  scrollStep?: number;\n  /** ≥sm 的网格列定义（会应用在 TabsList 上；在 layout=\"grid\" 时请提供无断点或自定义断点的类） */\n  gridColsClass?: string;\n  listClassName?: string;\n  triggerClassName?: string;\n  /** 布局模式：responsive | scroll | grid */\n  layout?: LayoutMode;\n  className?: string;\n  /** 是否显示左右渐变遮罩（在滚动模式下生效） */\n  fadeMasks?: boolean;\n  /** 渐变遮罩宽度，单位为像素 */\n  fadeMaskWidth?: number;\n}\n\nconst ResponsiveTabs = React.forwardRef<\n  React.ElementRef<typeof Tabs>,\n  ResponsiveTabsProps\n>(\n  (\n    {\n      value,\n      onValueChange,\n      items,\n      children,\n      scrollButtons = true,\n      scrollStep = 220,\n      gridColsClass = \"sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8\",\n      listClassName,\n      triggerClassName,\n      layout = \"responsive\",\n      className,\n      fadeMasks = true,\n      fadeMaskWidth = 64,\n      ...props\n    },\n    ref\n  ) => {\n    // 背景容器（不滚）\n    const tabsListRef = useRef<HTMLDivElement>(null);\n    // 可滚动轨道（只滚内容）\n    const scrollerRef = useRef<HTMLDivElement>(null);\n\n    const [showLeftButton, setShowLeftButton] = React.useState(false);\n    const [showRightButton, setShowRightButton] = React.useState(false);\n    const [showLeftFade, setShowLeftFade] = React.useState(false);\n    const [showRightFade, setShowRightFade] = React.useState(false);\n\n    const isScrollAll = layout === \"scroll\";\n    const isGridAll = layout === \"grid\";\n    const isResponsive = layout === \"responsive\";\n\n    // 更新滚动按钮和遮罩状态 —— 基于 scrollerRef\n    const checkScrollAffordance = React.useCallback(() => {\n      const el = scrollerRef.current;\n      if (!el) return;\n      const { scrollLeft, scrollWidth, clientWidth } = el;\n\n      if (scrollButtons) {\n        setShowLeftButton(scrollLeft > 0);\n        setShowRightButton(scrollLeft + clientWidth < scrollWidth - 1);\n      }\n\n      if (fadeMasks && (isScrollAll || isResponsive)) {\n        const maxScroll = scrollWidth - clientWidth;\n        setShowLeftFade(scrollLeft > 1);\n        setShowRightFade(maxScroll > 0 && scrollLeft < maxScroll - 1);\n      }\n    }, [scrollButtons, fadeMasks, isScrollAll, isResponsive]);\n\n    // 左右滚动\n    const scrollByDir = (dir: \"left\" | \"right\") => {\n      const el = scrollerRef.current;\n      if (!el) return;\n      el.scrollBy({\n        left: dir === \"left\" ? -scrollStep : scrollStep,\n        behavior: \"smooth\",\n      });\n    };\n\n    // 滚到激活项（只移动 scroller，不动背景）\n    const scrollToActiveTab = React.useCallback(() => {\n      const scroller = scrollerRef.current;\n      const list = tabsListRef.current;\n      if (!scroller || !list) return;\n\n      const active = list.querySelector<HTMLElement>('[data-state=\"active\"]');\n      if (!active) return;\n\n      const cRect = scroller.getBoundingClientRect();\n      const aRect = active.getBoundingClientRect();\n      const fullyVisible =\n        aRect.left >= cRect.left && aRect.right <= cRect.right;\n\n      if (!fullyVisible) {\n        const targetLeft =\n          active.offsetLeft - (scroller.clientWidth - active.clientWidth) / 2;\n        scroller.scrollTo({\n          left: Math.max(0, targetLeft),\n          behavior: \"smooth\",\n        });\n      }\n    }, []);\n\n    // 监听滚动与尺寸变化\n    useEffect(() => {\n      const el = scrollerRef.current;\n      if (!el) return;\n\n      const onScroll = () => checkScrollAffordance();\n      el.addEventListener(\"scroll\", onScroll, { passive: true });\n      checkScrollAffordance();\n\n      const ro = new ResizeObserver(() => {\n        checkScrollAffordance();\n        scrollToActiveTab();\n      });\n      ro.observe(el);\n\n      const onWinResize = () => {\n        checkScrollAffordance();\n        scrollToActiveTab();\n      };\n      window.addEventListener(\"resize\", onWinResize);\n\n      return () => {\n        el.removeEventListener(\"scroll\", onScroll);\n        ro.disconnect();\n        window.removeEventListener(\"resize\", onWinResize);\n      };\n    }, [checkScrollAffordance, scrollToActiveTab]);\n\n    // 将纵向滚轮转为横向滚（仅 scroll 模式）\n    useEffect(() => {\n      if (!isScrollAll) return;\n      const el = scrollerRef.current;\n      if (!el) return;\n\n      const onWheel = (e: WheelEvent) => {\n        if (Math.abs(e.deltaX) > Math.abs(e.deltaY)) return;\n        if (e.ctrlKey) return;\n\n        const hasOverflowX = el.scrollWidth > el.clientWidth;\n        if (!hasOverflowX) return;\n\n        const max = el.scrollWidth - el.clientWidth;\n        const atStart = el.scrollLeft <= 0;\n        const atEnd = el.scrollLeft >= max - 1;\n\n        const goingLeft = e.deltaY < 0;\n        const goingRight = e.deltaY > 0;\n\n        if ((goingLeft && !atStart) || (goingRight && !atEnd)) {\n          e.preventDefault();\n          el.scrollBy({ left: e.deltaY, behavior: \"auto\" });\n          checkScrollAffordance();\n        }\n      };\n\n      el.addEventListener(\"wheel\", onWheel, { passive: false });\n      return () => el.removeEventListener(\"wheel\", onWheel);\n    }, [isScrollAll, checkScrollAffordance]);\n\n    // value 改变时，确保激活项可见\n    useEffect(() => {\n      if (isGridAll) return;\n      scrollToActiveTab();\n    }, [value, isGridAll, scrollToActiveTab]);\n\n    // 类名计算\n    // 外层相对定位容器，仅用于放置按钮/遮罩层（不承担滚动）\n    const outerRelativeClass = \"relative w-full overflow-x-hidden\";\n\n    // TabsList：固定背景层（圆角灰底通常在这里），不滚动，负责 padding（edge gutter）\n    const listClass = cn(\n      // grid/responsive 的列定义（只在需要 grid 时作用）\n      (isGridAll || isResponsive) && gridColsClass,\n      \"h-auto w-full overflow-hidden\", // 关键：overflow-hidden，固定背景\n      // 当大屏 grid 时让内部布局切换到 grid（见 rowClass）\n      listClassName\n    );\n\n    // scroller：真正滚动的层\n    const scrollerClass = cn(\n      \"w-full p-0.5\",\n      isGridAll\n        ? \"overflow-visible\"\n        : isScrollAll\n          ? \"overflow-x-auto\"\n          : \"overflow-x-auto sm:overflow-visible\",\n      // 隐藏滚动条\n      !isGridAll &&\n        \"[scrollbar-width:none] [-ms-overflow-style:none] [&::-webkit-scrollbar]:hidden\",\n      // 阻断 inline 方向滚动链\n      \"overscroll-contain\"\n    );\n\n    // row：承载触发器的行；滚动场景下 inline-flex + w-max，grid 场景下切为 grid\n    const rowClass = cn(\n      isGridAll\n        ? \"grid w-full gap-0\"\n        : isScrollAll\n          ? \"inline-flex w-max whitespace-nowrap gap-1\"\n          : \"inline-flex w-max whitespace-nowrap gap-1 sm:grid sm:w-full sm:gap-0\",\n      (isGridAll || isResponsive) && gridColsClass\n    );\n\n    const triggerClass = cn(\n      !isGridAll && \"shrink-0 min-w-fit px-3 py-2\",\n      (isGridAll || isResponsive) &&\n        \"sm:shrink sm:min-w-0 sm:flex sm:items-center sm:justify-center\",\n      \"data-[state=active]:font-medium\",\n      triggerClassName\n    );\n\n    const buttonVisibilityClass = isScrollAll ? \"\" : \"sm:hidden\";\n\n    return (\n      <Tabs\n        ref={ref}\n        value={value}\n        onValueChange={onValueChange}\n        className={cn(\"w-full\", className)}\n        {...props}\n      >\n        <div className={outerRelativeClass}>\n          {/* 左侧按钮 */}\n          <AnimatePresence>\n            {scrollButtons && !isGridAll && showLeftButton && (\n              <motion.div\n                className=\"absolute left-1 top-1/2 z-10 h-8 w-8 -translate-y-1/2 rounded-full bg-background/80 p-0 shadow-md backdrop-blur-sm origin-left\"\n                initial={{ opacity: 0, scale: 0, x: -10 }}\n                animate={{ opacity: 1, scale: 1, x: 0 }}\n                exit={{ opacity: 0, scale: 0, x: -10 }}\n                transition={{ duration: 0.15 }}\n              >\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className={cn(\n                    \"h-8 w-8 size-8 rounded-full hover:bg-transparent cursor-pointer\",\n                    buttonVisibilityClass\n                  )}\n                  onClick={() => scrollByDir(\"left\")}\n                  aria-label=\"向左滚动\"\n                >\n                  <ChevronLeft className=\"h-4 w-4\" />\n                </Button>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {/* 右侧按钮 */}\n          <AnimatePresence>\n            {scrollButtons && !isGridAll && showRightButton && (\n              <motion.div\n                className=\"absolute right-1 top-1/2 z-10 h-8 w-8 -translate-y-1/2 rounded-full bg-background/80 p-0 shadow-md backdrop-blur-sm origin-right\"\n                initial={{ opacity: 0, scale: 0, x: 10 }}\n                animate={{ opacity: 1, scale: 1, x: 0 }}\n                exit={{ opacity: 0, scale: 0, x: 10 }}\n                transition={{ duration: 0.15 }}\n              >\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className={cn(\n                    \"h-8 w-8 size-8 rounded-full hover:bg-transparent cursor-pointer\",\n                    buttonVisibilityClass\n                  )}\n                  onClick={() => scrollByDir(\"right\")}\n                  aria-label=\"向右滚动\"\n                >\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {/* 固定背景层 TabsList（不滚动） */}\n          <TabsList ref={tabsListRef} className={listClass}>\n            {/* 仅 scroller 层滚动 */}\n            <div ref={scrollerRef} className={scrollerClass}>\n              {/* 真正承载触发器的行 */}\n              <div className={rowClass}>\n                {items.map((item) => (\n                  <TabsTrigger\n                    key={item.value}\n                    value={item.value}\n                    disabled={item.disabled}\n                    className={triggerClass}\n                  >\n                    <span className=\"flex items-center gap-2 max-w-full\">\n                      {item.icon && (\n                        <span className=\"shrink-0\">{item.icon}</span>\n                      )}\n                      <span className=\"truncate\">{item.label}</span>\n                      {item.badge !== undefined && (\n                        <Badge\n                          variant=\"secondary\"\n                          className=\"ml-1 h-4 min-w-[20px] px-1 text-xs\"\n                        >\n                          {item.badge}\n                        </Badge>\n                      )}\n                    </span>\n                  </TabsTrigger>\n                ))}\n              </div>\n            </div>\n\n            {/* 渐变遮罩 */}\n            <AnimatePresence>\n              {fadeMasks && (isScrollAll || isResponsive) && showLeftFade && (\n                <motion.div\n                  aria-hidden=\"true\"\n                  className=\"rounded-lg pointer-events-none absolute left-0 top-0 bottom-0 z-[5] bg-gradient-to-r from-muted to-transparent\"\n                  style={{ width: `${fadeMaskWidth}px` }}\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.3 }}\n                />\n              )}\n            </AnimatePresence>\n            <AnimatePresence>\n              {fadeMasks && (isScrollAll || isResponsive) && showRightFade && (\n                <motion.div\n                  aria-hidden=\"true\"\n                  className=\"rounded-lg pointer-events-none absolute right-0 top-0 bottom-0 z-[5] bg-gradient-to-l from-muted to-transparent\"\n                  style={{ width: `${fadeMaskWidth}px` }}\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.3 }}\n                />\n              )}\n            </AnimatePresence>\n          </TabsList>\n        </div>\n\n        <div className=\"mt-4\">{children}</div>\n      </Tabs>\n    );\n  }\n);\n\nResponsiveTabs.displayName = \"ResponsiveTabs\";\nexport { ResponsiveTabs };\n"
    }
  ]
}
