{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responsive-tabs",
  "title": "ResponsiveTabs",
  "type": "registry:component",
  "author": "QiuYeDx <me@qiuyedx.com>",
  "dependencies": [
    "react",
    "lucide-react"
  ],
  "registryDependencies": [
    "tabs",
    "badge",
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "path": "components/qiuye-ui/responsive-tabs.tsx",
      "target": "src/components/qiuye-ui/responsive-tabs.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useEffect } from \"react\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface TabItem {\n  value: string;\n  label: string;\n  icon?: React.ReactNode;\n  badge?: number | string;\n  disabled?: boolean;\n}\n\nexport interface ResponsiveTabsProps {\n  value: string;\n  onValueChange: (value: string) => void;\n  items: TabItem[];\n  children: React.ReactNode;\n  scrollButtons?: boolean;\n  scrollStep?: number;\n  gridColsClass?: string;\n  listClassName?: string;\n  triggerClassName?: string;\n  edgeGutter?: boolean;\n  className?: string;\n}\n\nconst ResponsiveTabs = React.forwardRef<\n  React.ElementRef<typeof Tabs>,\n  ResponsiveTabsProps\n>({\n  value,\n  onValueChange,\n  items,\n  children,\n  scrollButtons = true,\n  scrollStep = 220,\n  gridColsClass = \"sm:grid sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8\",\n  listClassName,\n  triggerClassName,\n  edgeGutter = true,\n  className,\n  ...props\n}, ref) => {\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const tabsListRef = useRef<HTMLDivElement>(null);\n  const [showLeftButton, setShowLeftButton] = React.useState(false);\n  const [showRightButton, setShowRightButton] = React.useState(false);\n\n  // 检查滚动按钮是否需要显示\n  const checkScrollButtons = React.useCallback(() => {\n    if (!scrollContainerRef.current || !scrollButtons) return;\n    \n    const container = scrollContainerRef.current;\n    const { scrollLeft, scrollWidth, clientWidth } = container;\n    \n    setShowLeftButton(scrollLeft > 0);\n    setShowRightButton(scrollLeft < scrollWidth - clientWidth - 1);\n  }, [scrollButtons]);\n\n  // 滚动到指定位置\n  const scrollTo = (direction: 'left' | 'right') => {\n    if (!scrollContainerRef.current) return;\n    \n    const container = scrollContainerRef.current;\n    const scrollAmount = direction === 'left' ? -scrollStep : scrollStep;\n    \n    container.scrollBy({\n      left: scrollAmount,\n      behavior: 'smooth'\n    });\n  };\n\n  // 滚动到激活的标签页\n  const scrollToActiveTab = React.useCallback(() => {\n    if (!scrollContainerRef.current || !tabsListRef.current) return;\n    \n    const container = scrollContainerRef.current;\n    const activeTab = tabsListRef.current.querySelector(`[data-state=\"active\"]`) as HTMLElement;\n    \n    if (!activeTab) return;\n    \n    const containerRect = container.getBoundingClientRect();\n    const activeTabRect = activeTab.getBoundingClientRect();\n    \n    const isVisible = \n      activeTabRect.left >= containerRect.left && \n      activeTabRect.right <= containerRect.right;\n    \n    if (!isVisible) {\n      const scrollLeft = activeTab.offsetLeft - container.clientWidth / 2 + activeTab.clientWidth / 2;\n      container.scrollTo({\n        left: Math.max(0, scrollLeft),\n        behavior: 'smooth'\n      });\n    }\n  }, []);\n\n  // 监听滚动事件\n  useEffect(() => {\n    const container = scrollContainerRef.current;\n    if (!container) return;\n\n    container.addEventListener('scroll', checkScrollButtons);\n    checkScrollButtons();\n\n    return () => {\n      container.removeEventListener('scroll', checkScrollButtons);\n    };\n  }, [checkScrollButtons]);\n\n  // 监听窗口大小变化\n  useEffect(() => {\n    const handleResize = () => {\n      checkScrollButtons();\n      scrollToActiveTab();\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [checkScrollButtons, scrollToActiveTab]);\n\n  // 当 value 改变时滚动到激活标签页\n  useEffect(() => {\n    scrollToActiveTab();\n  }, [value, scrollToActiveTab]);\n\n  return (\n    <Tabs\n      ref={ref}\n      value={value}\n      onValueChange={onValueChange}\n      className={cn(\"w-full\", className)}\n      {...props}\n    >\n      <div className=\"relative\">\n        {/* 左滚动按钮 */}\n        {scrollButtons && showLeftButton && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"absolute left-0 top-1/2 z-10 h-8 w-8 -translate-y-1/2 rounded-full bg-background/80 p-0 shadow-md backdrop-blur-sm sm:hidden\"\n            onClick={() => scrollTo('left')}\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n        )}\n\n        {/* 右滚动按钮 */}\n        {scrollButtons && showRightButton && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"absolute right-0 top-1/2 z-10 h-8 w-8 -translate-y-1/2 rounded-full bg-background/80 p-0 shadow-md backdrop-blur-sm sm:hidden\"\n            onClick={() => scrollTo('right')}\n          >\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        )}\n\n        {/* 滚动容器 */}\n        <div\n          ref={scrollContainerRef}\n          className={cn(\n            // 移动端：横向滚动\n            \"overflow-x-auto scrollbar-hide\",\n            // 大屏幕：网格布局\n            gridColsClass,\n            // 边缘间距\n            edgeGutter && \"px-8 sm:px-0\"\n          )}\n        >\n          <TabsList\n            ref={tabsListRef}\n            className={cn(\n              // 移动端：保持一行，不换行\n              \"w-max gap-1 sm:w-full sm:grid sm:gap-0\",\n              // 高度和内边距调整\n              \"h-auto p-1\",\n              listClassName\n            )}\n          >\n            {items.map((item) => (\n              <TabsTrigger\n                key={item.value}\n                value={item.value}\n                disabled={item.disabled}\n                className={cn(\n                  // 移动端：最小宽度，防止挤压\n                  \"min-w-fit whitespace-nowrap\",\n                  // 大屏幕：网格项样式\n                  \"sm:min-w-0 sm:flex sm:items-center sm:justify-center\",\n                  // 内边距调整\n                  \"px-3 py-2\",\n                  triggerClassName\n                )}\n              >\n                <div className=\"flex items-center gap-2\">\n                  {item.icon && (\n                    <span className=\"flex-shrink-0\">\n                      {item.icon}\n                    </span>\n                  )}\n                  <span className=\"truncate\">\n                    {item.label}\n                  </span>\n                  {item.badge !== undefined && (\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"ml-1 h-5 min-w-[20px] px-1 text-xs\"\n                    >\n                      {item.badge}\n                    </Badge>\n                  )}\n                </div>\n              </TabsTrigger>\n            ))}\n          </TabsList>\n        </div>\n      </div>\n\n      {/* 标签页内容 */}\n      <div className=\"mt-4\">\n        {children}\n      </div>\n    </Tabs>\n  );\n});\n\nResponsiveTabs.displayName = \"ResponsiveTabs\";\n\nexport { ResponsiveTabs };\n"
    }
  ]
}
